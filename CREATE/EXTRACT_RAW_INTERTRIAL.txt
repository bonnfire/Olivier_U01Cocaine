## make sure that you are in the directory/directories with the MedAssociates files
## check with getwd()

#### extract the filenames
## for example, I extract the filenames by experiment, so I use pattern = ".*SHA" to filter for SHA raw files
## sha_filenames <- grep(grep(list.files(path = ".", recursive = T, full.names = T), pattern = ".*txt", inv = T, value = T), pattern = ".*SHA", value = T)
## you can use this for all text files regardless of experiment
## cocaine_filenames <- grep(list.files(path = ".", recursive = T, full.names = T), pattern = ".*txt", inv = T, value = T)


## run this function to extract the metadata from the files
process_subjects_new <- function(x){
  
  read_subjects_new <- function(x) {
    subjects <-
      fread(
        paste0("awk '/Subject/{print NR \"_\" $2}' ", "'", x, "'"),
        fill = T,
        header = F
      )
    subjects$filename <- x
    return(subjects)
  }
  
  read_meta_subjects_new <- function(x) {
    date_time <-
      fread(
        paste0("awk '/Start/{print $3}' ", "'", x, "'", " | sed 'N;s/\\r\\n/_/g'"), # requires this line bc it has two fields of information
        fill = T,
        header = F
      )
    return(date_time)
  }
  date_time <- lapply(x, read_meta_subjects_new) %>% rbindlist()
  
  read_meta_box_new <- function(x) {
    box_new <-
      fread(
        paste0("awk '/Box/{print $2}' ", "'", x, "'"),
        fill = T,
        header = F
      )
    return(box_new)
  }
  box_new <- lapply(x, read_meta_box_new) %>% rbindlist()
  
  
  names_sha_append <- lapply(x, read_subjects_new) %>% rbindlist() %>% rename("labanimalid"="V1") %>%
    cbind(., date_time) %>% 
    rename("date_time" = "V1") %>% 
    cbind(., box_new) %>% 
    rename("box" = "V1") %>%
    mutate(labanimalid = paste0( str_extract(labanimalid, "\\d+"), "_",
                                str_extract(toupper(labanimalid), "[MF]\\d{1,3}"), "_",
                                str_extract(filename, "C\\d+"), "_",
                                sub('.*HS', '', toupper(filename)), "_",
                                sub(".*/.*/.*/", '', filename), "_",
                                date_time, "_",
                                box)) %>% # subject id, cohort, experiment, file/location perhaps
  select(-c("date_time", "box"))
  
  return(names_sha_append)
  
}



### run this function to extract your variables of choice
read_fread_new <- function(x, varname){
  
  fread_statements <- data.frame(varname = c("leftresponses", "rightresponses", "rewards", "lefttimestamps", "righttimestamps", "rewardstimestamps"),
                                 statement = c("awk '/L:/{flag=1;next}/R:/{flag=0}flag' ",
                                               "awk '/R:/{flag=1;next}/U:/{flag=0}flag' ",
                                               "awk '/W:/{flag=1;next}/Y:/{flag=0}flag' ", 
                                               "awk '/U:/{flag=1;next}/V:/{flag=0}flag' ",
                                               "awk '/Y:/{flag=1;next}/^$/{flag=0}flag' ",
                                               "awk '/V:/{flag=1;next}/W:/{flag=0}flag' "))
  statement <- fread_statements[which(fread_statements$varname == varname),]$statement
  rawdata <- fread(paste0(statement, "'", x, "'"), fill = T)
  data_indices <- grep("^0:$", rawdata$V1)
  split_data <- split(rawdata, cumsum(1:nrow(rawdata) %in% data_indices))
  
  keepzeroes <- c("leftresponses", "rightresponses", "rewards") # preserve bin sequences
  
  if(varname %in% keepzeroes){
    processeddata <- lapply(split_data, function(x){
      indexremoved <- x[,-1]
      processeddata_df <- data.frame(counts = as.vector(t(data.matrix(indexremoved)))) %>% # transpose to get by row
        mutate(bin = ifelse(row_number() == 1, "total", as.character(row_number() - 1)))
      return(processeddata_df)
    })
  }
  else{
    processeddata <- lapply(split_data, function(x){
      indexremoved <- x[,-1]
      nonzerorows <- indexremoved[rowSums(indexremoved) > 0, ] # remove excessively trailing 0's 
      processeddata_df <- data.frame(timestamps = as.vector(t(data.matrix(nonzerorows)))) # transpose to get by row
      if(any(processeddata_df$timestamps > 7500)){
        processeddata_df %<>% 
          mutate(bin = cut(timestamps, breaks=seq(from = 0, length.out = 73, by = 300), right = T, labels = seq(from = 1, to = 72, by =1))) %<>% 
          dplyr::filter(timestamps != 0)
      }
      else{
        processeddata_df %<>% 
          mutate(bin = cut(timestamps, breaks=seq(from = 0, length.out = 25, by = 300), right = T, labels = seq(from = 1, to = 24, by =1))) %<>% 
          dplyr::filter(timestamps != 0) 
      }
      
      processeddata_df <- processeddata_df %>%
        mutate(intertrial_time = lead(timestamps) - timestamps,
               bin = as.character(bin))
      
      return(processeddata_df)
    }) 
  }
  
  
  return(processeddata)
}


## demonstration: for example, if you want to extract the rewards timestamps
## run the above two functions
sha_subjects <- process_subjects_new(sha_new_files) %>% separate(labanimalid, c("row", "labanimalid"), sep = "_", extra = "merge") %>% 
  arrange(filename, as.numeric(row)) %>% select(-c(row, filename))

sha_rewards_new <-  lapply(sha_filenames, read_fread_new, "rewardstimestamps") %>% rbindlist() %>% separate(V1, into = c("row", "rewards"), sep = "_") %>% arrange(filename, as.numeric(row)) %>% select(-row) %>% 
  bind_cols(sha_subjects) %>% 
  separate(labanimalid, into = c("labanimalid", "cohort", "exp", "filename", "date", "time", "box"), sep = "_")

